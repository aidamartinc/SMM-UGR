/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package P14;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import sm.amc.iu.Lienzo2D;
import sm.amc.iu.Lienzo2D.Forma;

import java.awt.Color;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseMotionAdapter;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.amc.graficos.MiElipse;
import sm.amc.graficos.MiFantasma;
import sm.amc.graficos.MiLinea;
import sm.amc.graficos.MiRectangulo;
import sm.amc.graficos.MiShape;
import sm.amc.imagen.CambiarTonoOp;
import sm.amc.imagen.PosterizarOp;
import sm.amc.imagen.RojoOp;
import sm.image.EqualizationOp;
import sm.image.ImageTools;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.SepiaOp;
import sm.image.TintOp;
import sm.sound.SMClipPlayer;
import sm.sound.SMSoundRecorder;

/**
 * Clase Ventana Principal
 *
 * @author aidam
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Imagen fuente
     */
    private BufferedImage imgFuente = null;

    private SMClipPlayer player = null;

    private SMSoundRecorder recorder = null;
    private File grabacion = null;

    /**
     * Constructor de la clase
     */
    public VentanaPrincipal() {
        initComponents();
        this.setSize(1280, 720);
    }

    /**
     * MÃ©todo para obtener el lienzo seleccionado
     *
     * @return el lienzo o null
     */
    private Lienzo2D getSelectedLienzo() {
        VentanaInterna vi;
        vi = (VentanaInterna) escritorio.getSelectedFrame();
        return vi != null ? vi.getLienzo2D() : null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        BarraDeEstado = new javax.swing.JLabel();
        Coordenadas = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jToolBarImagen = new javax.swing.JToolBar();
        jLabelBrillo = new javax.swing.JLabel();
        SliderBrillo = new javax.swing.JSlider();
        jLabelContraste = new javax.swing.JLabel();
        SliderContraste = new javax.swing.JSlider();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        BoxFiltros = new javax.swing.JComboBox<>();
        jLabelCometa = new javax.swing.JLabel();
        SliderCometa = new javax.swing.JSlider();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        ButtonContrasteNormal = new javax.swing.JButton();
        ButtonContrasteIluminado = new javax.swing.JButton();
        ButtonContrasteOscurecido = new javax.swing.JButton();
        ButtonNegativo = new javax.swing.JButton();
        ButtonOscurClar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        SliderTransformLineal = new javax.swing.JSlider();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        ButtonRotar = new javax.swing.JButton();
        ButtonMas = new javax.swing.JButton();
        ButtonMenos = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        ButtonBandas = new javax.swing.JButton();
        BoxEspacioColor = new javax.swing.JComboBox<>();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        ButtonCombinar = new javax.swing.JButton();
        ButtonTintado = new javax.swing.JButton();
        ButtonSepia = new javax.swing.JButton();
        ButtonEcualizacion = new javax.swing.JButton();
        ButtonFiltroRojo = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        SliderPosterizacion = new javax.swing.JSlider();
        ButtonC1Op = new javax.swing.JButton();
        SliderCambiarTonoOp = new javax.swing.JSlider();
        ButtonC2Op = new javax.swing.JButton();
        escritorio = new javax.swing.JDesktopPane();
        jPanel4 = new javax.swing.JPanel();
        jToolBarDibujo = new javax.swing.JToolBar();
        ButtonNuevo = new javax.swing.JButton();
        ButtonAbrir = new javax.swing.JButton();
        ButtonGuardar = new javax.swing.JButton();
        ButtonDuplicar = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        ButtonLinea = new javax.swing.JToggleButton();
        ButtonRectang = new javax.swing.JToggleButton();
        ButtonCirc = new javax.swing.JToggleButton();
        ButtonFantasma = new javax.swing.JToggleButton();
        ButtonSeleccion = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jPanelColor = new javax.swing.JPanel();
        ButtonColor = new javax.swing.JButton();
        ButtonRellenar = new javax.swing.JToggleButton();
        ButtonTransparencia = new javax.swing.JToggleButton();
        ButtonAlisado = new javax.swing.JToggleButton();
        SliderGrosor = new javax.swing.JSlider();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        ButtonVolcar = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        jToolBarSonido = new javax.swing.JToolBar();
        ButtonPlay = new javax.swing.JButton();
        ButtonStop = new javax.swing.JButton();
        listaReproduccion = new javax.swing.JComboBox<>();
        ButtonRecord = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuArchivo = new javax.swing.JMenu();
        jMenuItemNuevo = new javax.swing.JMenuItem();
        jMenuItemAbrir = new javax.swing.JMenuItem();
        jMenuItemGuardar = new javax.swing.JMenuItem();
        jMenuItemAbrirAudio = new javax.swing.JMenuItem();
        jMenuItemGrabarAudio = new javax.swing.JMenuItem();
        jMenuImagen = new javax.swing.JMenu();
        jMenuItemRescaleOp = new javax.swing.JMenuItem();
        jMenuItemConvolveOp = new javax.swing.JMenuItem();
        jMenuItemAffineTransformOp = new javax.swing.JMenuItem();
        jMenuItemLookupOp = new javax.swing.JMenuItem();
        jMenuItemNegativo = new javax.swing.JMenuItem();
        jMenuItemBandCombine = new javax.swing.JMenuItem();
        jMenuItemColorConvert = new javax.swing.JMenuItem();
        jMenuAyuda = new javax.swing.JMenu();
        jMenuItemAcercaDe = new javax.swing.JMenuItem();

        FormListener formListener = new FormListener();

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(700, 45));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setPreferredSize(new java.awt.Dimension(400, 22));
        jPanel3.setLayout(new java.awt.BorderLayout());

        BarraDeEstado.setText("Barra de estado");
        jPanel3.add(BarraDeEstado, java.awt.BorderLayout.LINE_START);

        Coordenadas.setText("Coordenadas");
        jPanel3.add(Coordenadas, java.awt.BorderLayout.LINE_END);

        jPanel1.add(jPanel3, java.awt.BorderLayout.SOUTH);

        jPanel2.setMinimumSize(new java.awt.Dimension(700, 22));
        jPanel2.setPreferredSize(new java.awt.Dimension(561, 23));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jToolBarImagen.setRollover(true);
        jToolBarImagen.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jToolBarImagen.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jToolBarImagen.setMinimumSize(new java.awt.Dimension(700, 22));
        jToolBarImagen.setPreferredSize(new java.awt.Dimension(1000, 22));

        jLabelBrillo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/brillo.png"))); // NOI18N
        jToolBarImagen.add(jLabelBrillo);

        SliderBrillo.setToolTipText("brillo");
        SliderBrillo.setPreferredSize(new java.awt.Dimension(100, 20));
        SliderBrillo.addChangeListener(formListener);
        SliderBrillo.addFocusListener(formListener);
        jToolBarImagen.add(SliderBrillo);

        jLabelContraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        jToolBarImagen.add(jLabelContraste);

        SliderContraste.setMaximum(20);
        SliderContraste.setToolTipText("contraste");
        SliderContraste.setValue(10);
        SliderContraste.setPreferredSize(new java.awt.Dimension(100, 20));
        SliderContraste.addChangeListener(formListener);
        SliderContraste.addFocusListener(formListener);
        jToolBarImagen.add(SliderContraste);
        jToolBarImagen.add(jSeparator4);

        BoxFiltros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Blur media", "Blur binomial", "Enfoque", "Relieve", "Fronteras laplaciano", "Blur media 5x5", "Blur media 7x7", "Blur iluminado 3x3", "Blur iluminado 5x5", "Blur iluminado 7x7" }));
        BoxFiltros.setToolTipText("filtros");
        BoxFiltros.addActionListener(formListener);
        jToolBarImagen.add(BoxFiltros);

        jLabelCometa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cometa.png"))); // NOI18N
        jToolBarImagen.add(jLabelCometa);

        SliderCometa.setMaximum(20);
        SliderCometa.setMinimum(7);
        SliderCometa.setToolTipText("filtro cometa");
        SliderCometa.setValue(7);
        SliderCometa.setPreferredSize(new java.awt.Dimension(100, 20));
        SliderCometa.addChangeListener(formListener);
        SliderCometa.addFocusListener(formListener);
        jToolBarImagen.add(SliderCometa);
        jToolBarImagen.add(jSeparator5);

        ButtonContrasteNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste2.png"))); // NOI18N
        ButtonContrasteNormal.setToolTipText("contraste normal");
        ButtonContrasteNormal.setFocusable(false);
        ButtonContrasteNormal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonContrasteNormal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonContrasteNormal.addActionListener(formListener);
        jToolBarImagen.add(ButtonContrasteNormal);

        ButtonContrasteIluminado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        ButtonContrasteIluminado.setToolTipText("contraste ilumina");
        ButtonContrasteIluminado.setFocusable(false);
        ButtonContrasteIluminado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonContrasteIluminado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonContrasteIluminado.addActionListener(formListener);
        jToolBarImagen.add(ButtonContrasteIluminado);

        ButtonContrasteOscurecido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/ocurecer.png"))); // NOI18N
        ButtonContrasteOscurecido.setToolTipText("contraste oscurece");
        ButtonContrasteOscurecido.setFocusable(false);
        ButtonContrasteOscurecido.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonContrasteOscurecido.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonContrasteOscurecido.addActionListener(formListener);
        jToolBarImagen.add(ButtonContrasteOscurecido);

        ButtonNegativo.setText("Negativo");
        ButtonNegativo.setFocusable(false);
        ButtonNegativo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonNegativo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonNegativo.addActionListener(formListener);
        jToolBarImagen.add(ButtonNegativo);

        ButtonOscurClar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/operador1.png"))); // NOI18N
        ButtonOscurClar.setToolTipText("oscurece zonas claras");
        ButtonOscurClar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonOscurClar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonOscurClar.addActionListener(formListener);
        jToolBarImagen.add(ButtonOscurClar);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/operador2.png"))); // NOI18N
        jToolBarImagen.add(jLabel1);

        SliderTransformLineal.setMaximum(255);
        SliderTransformLineal.setToolTipText("transformaciÃ³n lineal");
        SliderTransformLineal.setValue(128);
        SliderTransformLineal.setPreferredSize(new java.awt.Dimension(100, 20));
        SliderTransformLineal.addChangeListener(formListener);
        SliderTransformLineal.addFocusListener(formListener);
        jToolBarImagen.add(SliderTransformLineal);
        jToolBarImagen.add(jSeparator6);

        ButtonRotar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotar180.png"))); // NOI18N
        ButtonRotar.setToolTipText("rotar 180Âº");
        ButtonRotar.setFocusable(false);
        ButtonRotar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonRotar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonRotar.addActionListener(formListener);
        jToolBarImagen.add(ButtonRotar);

        ButtonMas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/mas.png"))); // NOI18N
        ButtonMas.setToolTipText("mÃ¡s");
        ButtonMas.setFocusable(false);
        ButtonMas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonMas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonMas.addActionListener(formListener);
        jToolBarImagen.add(ButtonMas);

        ButtonMenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/menos.png"))); // NOI18N
        ButtonMenos.setToolTipText("menos");
        ButtonMenos.setFocusable(false);
        ButtonMenos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonMenos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonMenos.addActionListener(formListener);
        jToolBarImagen.add(ButtonMenos);
        jToolBarImagen.add(jSeparator7);

        ButtonBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/bandas.png"))); // NOI18N
        ButtonBandas.setToolTipText("separar bandas");
        ButtonBandas.setFocusable(false);
        ButtonBandas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonBandas.setMaximumSize(new java.awt.Dimension(26, 24));
        ButtonBandas.setMinimumSize(new java.awt.Dimension(26, 24));
        ButtonBandas.setPreferredSize(new java.awt.Dimension(26, 24));
        ButtonBandas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonBandas.addActionListener(formListener);
        jToolBarImagen.add(ButtonBandas);

        BoxEspacioColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY", " " }));
        BoxEspacioColor.setToolTipText("espacio de color");
        BoxEspacioColor.addActionListener(formListener);
        jToolBarImagen.add(BoxEspacioColor);
        jToolBarImagen.add(jSeparator8);

        ButtonCombinar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/combinar.png"))); // NOI18N
        ButtonCombinar.setToolTipText("combinar bandas");
        ButtonCombinar.setFocusable(false);
        ButtonCombinar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonCombinar.setPreferredSize(new java.awt.Dimension(26, 24));
        ButtonCombinar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonCombinar.addActionListener(formListener);
        jToolBarImagen.add(ButtonCombinar);

        ButtonTintado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/tintar.png"))); // NOI18N
        ButtonTintado.setToolTipText("tintado");
        ButtonTintado.setFocusable(false);
        ButtonTintado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonTintado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonTintado.addActionListener(formListener);
        jToolBarImagen.add(ButtonTintado);

        ButtonSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        ButtonSepia.setToolTipText("sepia");
        ButtonSepia.setFocusable(false);
        ButtonSepia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonSepia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonSepia.addActionListener(formListener);
        jToolBarImagen.add(ButtonSepia);

        ButtonEcualizacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/ecualizar.png"))); // NOI18N
        ButtonEcualizacion.setToolTipText("Ecualizacion");
        ButtonEcualizacion.setFocusable(false);
        ButtonEcualizacion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonEcualizacion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonEcualizacion.addActionListener(formListener);
        jToolBarImagen.add(ButtonEcualizacion);

        ButtonFiltroRojo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rojo.png"))); // NOI18N
        ButtonFiltroRojo.setToolTipText("filtro rojo");
        ButtonFiltroRojo.setFocusable(false);
        ButtonFiltroRojo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonFiltroRojo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonFiltroRojo.addActionListener(formListener);
        jToolBarImagen.add(ButtonFiltroRojo);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/posterizar.png"))); // NOI18N
        jToolBarImagen.add(jLabel2);

        SliderPosterizacion.setMaximum(20);
        SliderPosterizacion.setMinimum(2);
        SliderPosterizacion.setToolTipText("posterizaciÃ³n");
        SliderPosterizacion.setValue(2);
        SliderPosterizacion.setPreferredSize(new java.awt.Dimension(100, 20));
        SliderPosterizacion.addChangeListener(formListener);
        SliderPosterizacion.addFocusListener(formListener);
        jToolBarImagen.add(SliderPosterizacion);

        ButtonC1Op.setBackground(new java.awt.Color(255, 0, 0));
        ButtonC1Op.setToolTipText("Color 1 para cambiar el tono");
        ButtonC1Op.setBorderPainted(false);
        ButtonC1Op.setFocusable(false);
        ButtonC1Op.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonC1Op.setOpaque(true);
        ButtonC1Op.setPreferredSize(new java.awt.Dimension(10, 10));
        ButtonC1Op.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonC1Op.addActionListener(formListener);
        jToolBarImagen.add(ButtonC1Op);

        SliderCambiarTonoOp.setMaximum(360);
        SliderCambiarTonoOp.setToolTipText("umbral cambiar tono c1 por c2");
        SliderCambiarTonoOp.setPreferredSize(new java.awt.Dimension(100, 20));
        SliderCambiarTonoOp.addChangeListener(formListener);
        SliderCambiarTonoOp.addFocusListener(formListener);
        jToolBarImagen.add(SliderCambiarTonoOp);

        ButtonC2Op.setBackground(new java.awt.Color(0, 0, 255));
        ButtonC2Op.setToolTipText("Color 2 para cambiar el tono");
        ButtonC2Op.setBorderPainted(false);
        ButtonC2Op.setFocusable(false);
        ButtonC2Op.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonC2Op.setOpaque(true);
        ButtonC2Op.setPreferredSize(new java.awt.Dimension(10, 10));
        ButtonC2Op.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonC2Op.addActionListener(formListener);
        jToolBarImagen.add(ButtonC2Op);

        jPanel2.add(jToolBarImagen, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1173, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 468, Short.MAX_VALUE)
        );

        getContentPane().add(escritorio, java.awt.BorderLayout.WEST);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jToolBarDibujo.setRollover(true);

        ButtonNuevo.setBackground(new java.awt.Color(242, 242, 242));
        ButtonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        ButtonNuevo.setToolTipText("nuevo");
        ButtonNuevo.setBorderPainted(false);
        ButtonNuevo.setFocusable(false);
        ButtonNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonNuevo.addActionListener(formListener);
        jToolBarDibujo.add(ButtonNuevo);

        ButtonAbrir.setBackground(new java.awt.Color(242, 242, 242));
        ButtonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        ButtonAbrir.setToolTipText("abrir");
        ButtonAbrir.setBorderPainted(false);
        ButtonAbrir.setFocusable(false);
        ButtonAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonAbrir.addActionListener(formListener);
        jToolBarDibujo.add(ButtonAbrir);

        ButtonGuardar.setBackground(new java.awt.Color(242, 242, 242));
        ButtonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        ButtonGuardar.setToolTipText("guardar");
        ButtonGuardar.setBorderPainted(false);
        ButtonGuardar.setFocusable(false);
        ButtonGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonGuardar.addActionListener(formListener);
        jToolBarDibujo.add(ButtonGuardar);

        ButtonDuplicar.setText("x2");
        ButtonDuplicar.setToolTipText("duplicar");
        ButtonDuplicar.setFocusable(false);
        ButtonDuplicar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonDuplicar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonDuplicar.addActionListener(formListener);
        jToolBarDibujo.add(ButtonDuplicar);
        jToolBarDibujo.add(jSeparator3);

        ButtonLinea.setBackground(new java.awt.Color(242, 242, 242));
        ButtonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        ButtonLinea.setSelected(true);
        ButtonLinea.setToolTipText("linea");
        ButtonLinea.setBorderPainted(false);
        ButtonLinea.setFocusable(false);
        ButtonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonLinea.addActionListener(formListener);
        jToolBarDibujo.add(ButtonLinea);

        ButtonRectang.setBackground(new java.awt.Color(242, 242, 242));
        ButtonRectang.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        ButtonRectang.setToolTipText("rectangulo");
        ButtonRectang.setBorderPainted(false);
        ButtonRectang.setFocusable(false);
        ButtonRectang.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonRectang.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonRectang.addActionListener(formListener);
        jToolBarDibujo.add(ButtonRectang);

        ButtonCirc.setBackground(new java.awt.Color(242, 242, 242));
        ButtonCirc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        ButtonCirc.setToolTipText("elipse");
        ButtonCirc.setBorderPainted(false);
        ButtonCirc.setFocusable(false);
        ButtonCirc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonCirc.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonCirc.addActionListener(formListener);
        jToolBarDibujo.add(ButtonCirc);

        ButtonFantasma.setBackground(new java.awt.Color(242, 242, 242));
        ButtonFantasma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/fantasma.png"))); // NOI18N
        ButtonFantasma.setToolTipText("fantasma");
        ButtonFantasma.setBorderPainted(false);
        ButtonFantasma.setFocusable(false);
        ButtonFantasma.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonFantasma.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonFantasma.addActionListener(formListener);
        jToolBarDibujo.add(ButtonFantasma);

        ButtonSeleccion.setBackground(new java.awt.Color(242, 242, 242));
        ButtonSeleccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        ButtonSeleccion.setToolTipText("seleccionar");
        ButtonSeleccion.setBorderPainted(false);
        ButtonSeleccion.setFocusable(false);
        ButtonSeleccion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonSeleccion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonSeleccion.addActionListener(formListener);
        jToolBarDibujo.add(ButtonSeleccion);
        jToolBarDibujo.add(jSeparator1);

        jPanelColor.setPreferredSize(new java.awt.Dimension(34, 32));

        ButtonColor.setBackground(new java.awt.Color(0, 0, 0));
        ButtonColor.setToolTipText("color");
        ButtonColor.setBorderPainted(false);
        ButtonColor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonColor.setMaximumSize(new java.awt.Dimension(34, 32));
        ButtonColor.setMinimumSize(new java.awt.Dimension(34, 32));
        ButtonColor.setPreferredSize(new java.awt.Dimension(34, 32));
        ButtonColor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonColor.addActionListener(formListener);

        javax.swing.GroupLayout jPanelColorLayout = new javax.swing.GroupLayout(jPanelColor);
        jPanelColor.setLayout(jPanelColorLayout);
        jPanelColorLayout.setHorizontalGroup(
            jPanelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
            .addGroup(jPanelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelColorLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(ButtonColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanelColorLayout.setVerticalGroup(
            jPanelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
            .addGroup(jPanelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelColorLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(ButtonColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jToolBarDibujo.add(jPanelColor);

        ButtonRellenar.setBackground(new java.awt.Color(242, 242, 242));
        ButtonRellenar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        ButtonRellenar.setToolTipText("rellenar");
        ButtonRellenar.setBorderPainted(false);
        ButtonRellenar.setFocusable(false);
        ButtonRellenar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonRellenar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonRellenar.addActionListener(formListener);
        jToolBarDibujo.add(ButtonRellenar);

        ButtonTransparencia.setBackground(new java.awt.Color(242, 242, 242));
        ButtonTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        ButtonTransparencia.setToolTipText("transparencia");
        ButtonTransparencia.setBorderPainted(false);
        ButtonTransparencia.setFocusable(false);
        ButtonTransparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonTransparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonTransparencia.addActionListener(formListener);
        jToolBarDibujo.add(ButtonTransparencia);

        ButtonAlisado.setBackground(new java.awt.Color(242, 242, 242));
        ButtonAlisado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        ButtonAlisado.setToolTipText("alisado");
        ButtonAlisado.setBorderPainted(false);
        ButtonAlisado.setFocusable(false);
        ButtonAlisado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonAlisado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonAlisado.addActionListener(formListener);
        jToolBarDibujo.add(ButtonAlisado);

        SliderGrosor.setToolTipText("grosor");
        SliderGrosor.setMaximumSize(new java.awt.Dimension(100, 20));
        SliderGrosor.addChangeListener(formListener);
        jToolBarDibujo.add(SliderGrosor);
        jToolBarDibujo.add(jSeparator2);

        ButtonVolcar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/volcado.png"))); // NOI18N
        ButtonVolcar.setToolTipText("volcado");
        ButtonVolcar.setBorderPainted(false);
        ButtonVolcar.setContentAreaFilled(false);
        ButtonVolcar.setFocusable(false);
        ButtonVolcar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonVolcar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonVolcar.addActionListener(formListener);
        jToolBarDibujo.add(ButtonVolcar);
        jToolBarDibujo.add(jSeparator9);

        jPanel4.add(jToolBarDibujo, java.awt.BorderLayout.WEST);

        jToolBarSonido.setRollover(true);

        ButtonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/play.png"))); // NOI18N
        ButtonPlay.setFocusable(false);
        ButtonPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonPlay.addActionListener(formListener);
        jToolBarSonido.add(ButtonPlay);

        ButtonStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stop.png"))); // NOI18N
        ButtonStop.setFocusable(false);
        ButtonStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonStop.addActionListener(formListener);
        jToolBarSonido.add(ButtonStop);

        jToolBarSonido.add(listaReproduccion);

        ButtonRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record.png"))); // NOI18N
        ButtonRecord.setFocusable(false);
        ButtonRecord.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ButtonRecord.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ButtonRecord.addActionListener(formListener);
        jToolBarSonido.add(ButtonRecord);

        jPanel4.add(jToolBarSonido, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jMenuArchivo.setText("Archivo");
        jMenuArchivo.setToolTipText("Archivo");

        jMenuItemNuevo.setText("Nuevo");
        jMenuItemNuevo.addActionListener(formListener);
        jMenuArchivo.add(jMenuItemNuevo);

        jMenuItemAbrir.setText("Abrir");
        jMenuItemAbrir.addActionListener(formListener);
        jMenuArchivo.add(jMenuItemAbrir);

        jMenuItemGuardar.setText("Guardar");
        jMenuItemGuardar.addActionListener(formListener);
        jMenuArchivo.add(jMenuItemGuardar);

        jMenuItemAbrirAudio.setText("Abrir audio");
        jMenuItemAbrirAudio.addActionListener(formListener);
        jMenuArchivo.add(jMenuItemAbrirAudio);

        jMenuItemGrabarAudio.setText("Grabar audio");
        jMenuItemGrabarAudio.addActionListener(formListener);
        jMenuArchivo.add(jMenuItemGrabarAudio);

        jMenuBar1.add(jMenuArchivo);

        jMenuImagen.setText("Imagen");
        jMenuImagen.setToolTipText("ImÃ¡gen");

        jMenuItemRescaleOp.setText("RescaleOp");
        jMenuItemRescaleOp.addActionListener(formListener);
        jMenuImagen.add(jMenuItemRescaleOp);

        jMenuItemConvolveOp.setText("ConvolveOp");
        jMenuItemConvolveOp.addActionListener(formListener);
        jMenuImagen.add(jMenuItemConvolveOp);

        jMenuItemAffineTransformOp.setText("AffineTransformOp");
        jMenuItemAffineTransformOp.addActionListener(formListener);
        jMenuImagen.add(jMenuItemAffineTransformOp);

        jMenuItemLookupOp.setText("LookupOp");
        jMenuItemLookupOp.addActionListener(formListener);
        jMenuImagen.add(jMenuItemLookupOp);

        jMenuItemNegativo.setText("Negativo");
        jMenuItemNegativo.addActionListener(formListener);
        jMenuImagen.add(jMenuItemNegativo);

        jMenuItemBandCombine.setText("BandCombineOp");
        jMenuItemBandCombine.addActionListener(formListener);
        jMenuImagen.add(jMenuItemBandCombine);

        jMenuItemColorConvert.setText("ColorConvertOp");
        jMenuItemColorConvert.addActionListener(formListener);
        jMenuImagen.add(jMenuItemColorConvert);

        jMenuBar1.add(jMenuImagen);

        jMenuAyuda.setText("Ayuda");
        jMenuAyuda.setToolTipText("Ayuda");

        jMenuItemAcercaDe.setText("Acerca de");
        jMenuItemAcercaDe.addActionListener(formListener);
        jMenuAyuda.add(jMenuItemAcercaDe);

        jMenuBar1.add(jMenuAyuda);

        setJMenuBar(jMenuBar1);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, javax.swing.event.ChangeListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == BoxFiltros) {
                VentanaPrincipal.this.BoxFiltrosActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonContrasteNormal) {
                VentanaPrincipal.this.ButtonContrasteNormalActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonContrasteIluminado) {
                VentanaPrincipal.this.ButtonContrasteIluminadoActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonContrasteOscurecido) {
                VentanaPrincipal.this.ButtonContrasteOscurecidoActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonNegativo) {
                VentanaPrincipal.this.ButtonNegativoActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonOscurClar) {
                VentanaPrincipal.this.ButtonOscurClarActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonRotar) {
                VentanaPrincipal.this.ButtonRotarActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonMas) {
                VentanaPrincipal.this.ButtonMasActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonMenos) {
                VentanaPrincipal.this.ButtonMenosActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonBandas) {
                VentanaPrincipal.this.ButtonBandasActionPerformed(evt);
            }
            else if (evt.getSource() == BoxEspacioColor) {
                VentanaPrincipal.this.BoxEspacioColorActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonCombinar) {
                VentanaPrincipal.this.ButtonCombinarActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonTintado) {
                VentanaPrincipal.this.ButtonTintadoActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonSepia) {
                VentanaPrincipal.this.ButtonSepiaActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonEcualizacion) {
                VentanaPrincipal.this.ButtonEcualizacionActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonFiltroRojo) {
                VentanaPrincipal.this.ButtonFiltroRojoActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonC1Op) {
                VentanaPrincipal.this.ButtonC1OpActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonC2Op) {
                VentanaPrincipal.this.ButtonC2OpActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonNuevo) {
                VentanaPrincipal.this.ButtonNuevoActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonAbrir) {
                VentanaPrincipal.this.ButtonAbrirActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonGuardar) {
                VentanaPrincipal.this.ButtonGuardarActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonDuplicar) {
                VentanaPrincipal.this.ButtonDuplicarActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonLinea) {
                VentanaPrincipal.this.ButtonLineaActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonRectang) {
                VentanaPrincipal.this.ButtonRectangActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonCirc) {
                VentanaPrincipal.this.ButtonCircActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonFantasma) {
                VentanaPrincipal.this.ButtonFantasmaActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonSeleccion) {
                VentanaPrincipal.this.ButtonSeleccionActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonColor) {
                VentanaPrincipal.this.ButtonColorActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonRellenar) {
                VentanaPrincipal.this.ButtonRellenarActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonTransparencia) {
                VentanaPrincipal.this.ButtonTransparenciaActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonAlisado) {
                VentanaPrincipal.this.ButtonAlisadoActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonVolcar) {
                VentanaPrincipal.this.ButtonVolcarActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonPlay) {
                VentanaPrincipal.this.ButtonPlayActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonStop) {
                VentanaPrincipal.this.ButtonStopActionPerformed(evt);
            }
            else if (evt.getSource() == ButtonRecord) {
                VentanaPrincipal.this.ButtonRecordActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItemNuevo) {
                VentanaPrincipal.this.jMenuItemNuevoActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItemAbrir) {
                VentanaPrincipal.this.jMenuItemAbrirActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItemGuardar) {
                VentanaPrincipal.this.jMenuItemGuardarActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItemAbrirAudio) {
                VentanaPrincipal.this.jMenuItemAbrirAudioActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItemGrabarAudio) {
                VentanaPrincipal.this.jMenuItemGrabarAudioActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItemRescaleOp) {
                VentanaPrincipal.this.jMenuItemRescaleOpActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItemConvolveOp) {
                VentanaPrincipal.this.jMenuItemConvolveOpActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItemAffineTransformOp) {
                VentanaPrincipal.this.jMenuItemAffineTransformOpActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItemLookupOp) {
                VentanaPrincipal.this.jMenuItemLookupOpActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItemNegativo) {
                VentanaPrincipal.this.jMenuItemNegativoActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItemBandCombine) {
                VentanaPrincipal.this.jMenuItemBandCombineActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItemColorConvert) {
                VentanaPrincipal.this.jMenuItemColorConvertActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItemAcercaDe) {
                VentanaPrincipal.this.jMenuItemAcercaDeActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == SliderBrillo) {
                VentanaPrincipal.this.SliderBrilloFocusGained(evt);
            }
            else if (evt.getSource() == SliderContraste) {
                VentanaPrincipal.this.SliderContrasteFocusGained(evt);
            }
            else if (evt.getSource() == SliderCometa) {
                VentanaPrincipal.this.SliderCometaFocusGained(evt);
            }
            else if (evt.getSource() == SliderTransformLineal) {
                VentanaPrincipal.this.SliderTransformLinealFocusGained(evt);
            }
            else if (evt.getSource() == SliderPosterizacion) {
                VentanaPrincipal.this.SliderPosterizacionFocusGained(evt);
            }
            else if (evt.getSource() == SliderCambiarTonoOp) {
                VentanaPrincipal.this.SliderCambiarTonoOpFocusGained(evt);
            }
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == SliderBrillo) {
                VentanaPrincipal.this.SliderBrilloFocusLost(evt);
            }
            else if (evt.getSource() == SliderContraste) {
                VentanaPrincipal.this.SliderContrasteFocusLost(evt);
            }
            else if (evt.getSource() == SliderCometa) {
                VentanaPrincipal.this.SliderCometaFocusLost(evt);
            }
            else if (evt.getSource() == SliderTransformLineal) {
                VentanaPrincipal.this.SliderTransformLinealFocusLost(evt);
            }
            else if (evt.getSource() == SliderPosterizacion) {
                VentanaPrincipal.this.SliderPosterizacionFocusLost(evt);
            }
            else if (evt.getSource() == SliderCambiarTonoOp) {
                VentanaPrincipal.this.SliderCambiarTonoOpFocusLost(evt);
            }
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == SliderBrillo) {
                VentanaPrincipal.this.SliderBrilloStateChanged(evt);
            }
            else if (evt.getSource() == SliderContraste) {
                VentanaPrincipal.this.SliderContrasteStateChanged(evt);
            }
            else if (evt.getSource() == SliderCometa) {
                VentanaPrincipal.this.SliderCometaStateChanged(evt);
            }
            else if (evt.getSource() == SliderTransformLineal) {
                VentanaPrincipal.this.SliderTransformLinealStateChanged(evt);
            }
            else if (evt.getSource() == SliderPosterizacion) {
                VentanaPrincipal.this.SliderPosterizacionStateChanged(evt);
            }
            else if (evt.getSource() == SliderCambiarTonoOp) {
                VentanaPrincipal.this.SliderCambiarTonoOpStateChanged(evt);
            }
            else if (evt.getSource() == SliderGrosor) {
                VentanaPrincipal.this.SliderGrosorStateChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonLineaActionPerformed
        // TODO add your handling code here:
        //this.lienzo.setTipoForma(0);
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTipoForma(Forma.LINEA);
            this.ButtonRectang.setSelected(false);
            this.ButtonCirc.setSelected(false);
            this.ButtonFantasma.setSelected(false);
            this.ButtonSeleccion.setSelected(false);
            lienzo.setEditar(false);
            lienzo.pararEditar();
            this.BarraDeEstado.setText("Linea");
        }

    }//GEN-LAST:event_ButtonLineaActionPerformed

    private void ButtonRectangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRectangActionPerformed
        // TODO add your handling code here:
        //this.lienzo.setTipoForma(1);
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTipoForma(Forma.RECTANGULO);
            this.ButtonLinea.setSelected(false);
            this.ButtonCirc.setSelected(false);
            this.ButtonFantasma.setSelected(false);
            this.ButtonSeleccion.setSelected(false);
            lienzo.setEditar(false);
            lienzo.pararEditar();
            this.BarraDeEstado.setText("Rectangulo");
        }
    }//GEN-LAST:event_ButtonRectangActionPerformed

    private void ButtonCircActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCircActionPerformed
        // TODO add your handling code here:
        //this.lienzo.setTipoForma(2);
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTipoForma(Forma.ELIPSE);
            this.ButtonLinea.setSelected(false);
            this.ButtonRectang.setSelected(false);
            this.ButtonFantasma.setSelected(false);
            this.ButtonSeleccion.setSelected(false);
            lienzo.setEditar(false);
            lienzo.pararEditar();
            this.BarraDeEstado.setText("Elipse");
        }
    }//GEN-LAST:event_ButtonCircActionPerformed

    private void jMenuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAbrirActionPerformed
        // TODO add your handling code here:
        JFileChooser dig = new JFileChooser();
        String[] s = ImageIO.getReaderFileSuffixes();
        //AudioFileFormat.Type[]] s2 = AudioSystem.getAudioFileTypes();
        for (int i = 0; i < s.length; i++) {
            FileFilter filter = new FileNameExtensionFilter(s[i] + " files", s[i]);
            //dig.setFileFilter(filter);
            dig.addChoosableFileFilter(filter);
        }
        dig.setFileFilter(new FileNameExtensionFilter("Audio (wav, au)", "wav", "au"));
        //dig.addChoosableFileFilter(filter);
        int resp = dig.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {

                File f = dig.getSelectedFile();

                // File f = dig.getSelectedFile();
                String extension = "";
                int i = f.getName().lastIndexOf(".");
                if (i > 0 && i < f.getName().length() - 1) {
                    extension = f.getName().substring(i + 1);
                }
                if (extension == "wav" || extension == "au") {
                    f = new File(dig.getSelectedFile().getAbsolutePath()) {
                        @Override
                        public String toString() {
                            return this.getName();
                        }
                    };
                } else {
                    BufferedImage img = ImageIO.read(f);
                    VentanaInterna vi = new VentanaInterna();
                    vi.getLienzo2D().setImage(img);
                    vi.getLienzo2D().addMouseMotionListener(new ManejadorRaton());
                    vi.getLienzo2D().addMouseListener(new ManejadorClickRaton());
                    this.escritorio.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                }
            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_jMenuItemAbrirActionPerformed

    private void jMenuItemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGuardarActionPerformed
        // TODO add your handling code here:   
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            //BufferedImage img = vi.getLienzo2D().getImage();
            BufferedImage img = vi.getLienzo2D().getPaintedImage();
            if (img != null) {
                JFileChooser dig = new JFileChooser();
                String[] s = ImageIO.getWriterFileSuffixes();
                for (int i = 0; i < s.length; i++) {
                    FileFilter filter = new FileNameExtensionFilter(s[i] + " files", s[i]);
                    dig.setFileFilter(filter);
                }
                int resp = dig.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dig.getSelectedFile();
                        String extension = "";
                        int i = f.getName().lastIndexOf(".");
                        if (i > 0 && i < f.getName().length() - 1) {
                            extension = f.getName().substring(i + 1);
                        }
                        ImageIO.write(img, extension, f);
                        vi.setTitle(f.getName());
                    } catch (Exception ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_jMenuItemGuardarActionPerformed

    private void jMenuItemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNuevoActionPerformed
        // TODO add your handling code here:
        /*Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo!=null){
            lienzo.clean();*/
        //Lienzo2D l = new Lienzo2D();
        //lienzo = l;
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(400, 400, BufferedImage.TYPE_INT_RGB);
        vi.getLienzo2D().setImage(img);
        vi.getLienzo2D().addMouseMotionListener(new ManejadorRaton());
        vi.getLienzo2D().addMouseListener(new ManejadorClickRaton());
        vi.setTitle("nuevo");
        // Para que no salga relleno en negro
        img.getGraphics().setColor(Color.WHITE);
        img.getGraphics().fillRect(img.getMinX(), img.getMinY(), img.getWidth(), img.getHeight());
        vi.addInternalFrameListener(new ManejadorVentanaInterna());
    }//GEN-LAST:event_jMenuItemNuevoActionPerformed

    private void ButtonFantasmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonFantasmaActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTipoForma(Forma.FANTASMA);
            this.ButtonRectang.setSelected(false);
            this.ButtonCirc.setSelected(false);
            this.ButtonLinea.setSelected(false);
            this.ButtonSeleccion.setSelected(false);
            lienzo.setEditar(false);
            lienzo.pararEditar();
            this.BarraDeEstado.setText("Fantasma");
        }
    }//GEN-LAST:event_ButtonFantasmaActionPerformed

    private void ButtonSeleccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSeleccionActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setEditar(this.ButtonSeleccion.isSelected());
            if (lienzo.getEditar()) {
                this.ButtonLinea.setSelected(false);
                this.ButtonRectang.setSelected(false);
                this.ButtonCirc.setSelected(false);
                this.ButtonFantasma.setSelected(false);
                this.ButtonAlisado.setSelected(false);
                this.ButtonRellenar.setSelected(false);
                this.ButtonTransparencia.setSelected(false);
                this.BarraDeEstado.setText("Seleccion");
            } else {
                Forma f = lienzo.getTipoForma();
                switch (f) {
                    case LINEA:
                        this.ButtonLinea.setSelected(true);
                        this.BarraDeEstado.setText("Linea");
                        break;
                    case RECTANGULO:
                        this.ButtonRectang.setSelected(true);
                        this.BarraDeEstado.setText("Rectangulo");
                        break;
                    case ELIPSE:
                        this.ButtonCirc.setSelected(true);
                        this.BarraDeEstado.setText("Elipse");
                        break;
                    case FANTASMA:
                        this.ButtonFantasma.setSelected(true);
                        this.BarraDeEstado.setText("Fantasma");
                        break;
                }
                this.ButtonAlisado.setSelected(lienzo.getAlisado());
                this.ButtonRellenar.setSelected(lienzo.getRelleno());
                this.ButtonTransparencia.setSelected(lienzo.getTransparencia());
            }
        }
    }//GEN-LAST:event_ButtonSeleccionActionPerformed

    private void ButtonRellenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRellenarActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setRelleno(this.ButtonRellenar.isSelected());
            //this.ButtonSeleccion.setSelected(false);
        }
    }//GEN-LAST:event_ButtonRellenarActionPerformed

    private void ButtonTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonTransparenciaActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setTransparencia(this.ButtonTransparencia.isSelected());
            if (lienzo.getTransparencia()) {
                lienzo.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f));
            } else {
                lienzo.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1));
            }
            //this.ButtonSeleccion.setSelected(false);
        }
    }//GEN-LAST:event_ButtonTransparenciaActionPerformed

    private void ButtonAlisadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAlisadoActionPerformed
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setAlisado(this.ButtonAlisado.isSelected());
            //this.ButtonSeleccion.setSelected(false);
        }
    }//GEN-LAST:event_ButtonAlisadoActionPerformed

    private void SliderGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderGrosorStateChanged
        // TODO add your handling code here:
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            Stroke trazo = new BasicStroke((int) SliderGrosor.getValue());
            lienzo.setTrazo(trazo);
            lienzo.repaint();
            //this.ButtonSeleccion.setSelected(false);
        }
    }//GEN-LAST:event_SliderGrosorStateChanged

    private void ButtonColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonColorActionPerformed
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Elije un color", Color.RED);
        Lienzo2D lienzo = getSelectedLienzo();
        if (lienzo != null) {
            lienzo.setColor(color);
            this.ButtonColor.setBackground(color);
            this.ButtonColor.setSelected(false);
            //this.ButtonSeleccion.setSelected(false);
        }
    }//GEN-LAST:event_ButtonColorActionPerformed

    private void ButtonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonNuevoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(400, 400, BufferedImage.TYPE_INT_RGB);
        vi.getLienzo2D().setImage(img);
        vi.getLienzo2D().addMouseMotionListener(new ManejadorRaton());
        vi.getLienzo2D().addMouseListener(new ManejadorClickRaton());
        vi.setTitle("nuevo");
        // Para que no salga relleno en negro
        img.getGraphics().setColor(Color.WHITE);
        img.getGraphics().fillRect(img.getMinX(), img.getMinY(), img.getWidth(), img.getHeight());
        vi.addInternalFrameListener(new ManejadorVentanaInterna());
    }//GEN-LAST:event_ButtonNuevoActionPerformed

    private void ButtonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAbrirActionPerformed
        // TODO add your handling code here:
        JFileChooser dig = new JFileChooser();
        String[] s = ImageIO.getReaderFileSuffixes();
        for (int i = 0; i < s.length; i++) {
            FileFilter filter = new FileNameExtensionFilter(s[i] + " files", s[i]);
            //dig.setFileFilter(filter);
            dig.addChoosableFileFilter(filter);
        }
        int resp = dig.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dig.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna();
                vi.getLienzo2D().setImage(img);
                vi.getLienzo2D().addMouseMotionListener(new ManejadorRaton());
                vi.getLienzo2D().addMouseListener(new ManejadorClickRaton());
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        } else {

        }
    }//GEN-LAST:event_ButtonAbrirActionPerformed

    private void ButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonGuardarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            //BufferedImage img = vi.getLienzo2D().getImage();
            BufferedImage img = vi.getLienzo2D().getPaintedImage();
            if (img != null) {
                JFileChooser dig = new JFileChooser();
                String[] s = ImageIO.getWriterFileSuffixes();
                for (int i = 0; i < s.length; i++) {
                    FileFilter filter = new FileNameExtensionFilter(s[i] + " files", s[i]);
                    dig.setFileFilter(filter);
                }
                int resp = dig.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dig.getSelectedFile();
                        String extension = "";
                        int i = f.getName().lastIndexOf(".");
                        if (i > 0 && i < f.getName().length() - 1) {
                            extension = f.getName().substring(i + 1);
                        }
                        ImageIO.write(img, extension, f);
                        vi.setTitle(f.getName());
                    } catch (Exception ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_ButtonGuardarActionPerformed

    private void ButtonVolcarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonVolcarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                vi.getLienzo2D().volcar(vi.getLienzo2D().getForma());
            }
        }
    }//GEN-LAST:event_ButtonVolcarActionPerformed

    private void jMenuItemRescaleOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRescaleOpActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    rop.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_jMenuItemRescaleOpActionPerformed

    private void jMenuItemConvolveOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConvolveOpActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f, 0.1f};
                    Kernel k = new Kernel(3, 3, filtro);
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_jMenuItemConvolveOpActionPerformed

    private void SliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderBrilloFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_SliderBrilloFocusGained

    private void SliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderBrilloStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null && imgFuente != null) {
                try {
                    int brillo = this.SliderBrillo.getValue();
                    RescaleOp rop = new RescaleOp(1.0f, brillo, null);
                    rop.filter(imgFuente, img);
                    //vi.getLienzo2D().repaint();
                    escritorio.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_SliderBrilloStateChanged

    private void SliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderBrilloFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        this.SliderBrillo.setValue(0);
    }//GEN-LAST:event_SliderBrilloFocusLost

    private void SliderContrasteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderContrasteFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_SliderContrasteFocusGained

    private void SliderContrasteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderContrasteStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null && imgFuente != null) {
                try {
                    float contr = (float) this.SliderContraste.getValue() / 10.0f;
                    RescaleOp rop = new RescaleOp(contr, 0.0f, null);
                    rop.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_SliderContrasteStateChanged

    private void SliderContrasteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderContrasteFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        this.SliderContraste.setValue(0);
    }//GEN-LAST:event_SliderContrasteFocusLost

    private void BoxFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoxFiltrosActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                Kernel k = null;
                switch (this.BoxFiltros.getSelectedItem().toString()) {
                    case "Blur media":
                        k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                        break;
                    case "Blur binomial":
                        k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                        break;
                    case "Enfoque":
                        k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                        break;
                    case "Relieve":
                        k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                        break;
                    case "Fronteras laplaciano":
                        k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                        break;
                    case "Blur media 5x5":
                        float f5[] = {1 / 25f, 1 / 25f, 1 / 25f, 1 / 25f, 1 / 25f,
                            1 / 25f, 1 / 25f, 1 / 25f, 1 / 25f, 1 / 25f,
                            1 / 25f, 1 / 25f, 1 / 25f, 1 / 25f, 1 / 25f,
                            1 / 25f, 1 / 25f, 1 / 25f, 1 / 25f, 1 / 25f,
                            1 / 25f, 1 / 25f, 1 / 25f, 1 / 25f, 1 / 25f};
                        k = new Kernel(5, 5, f5);
                        break;
                    case "Blur media 7x7":
                        float f7[] = {1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f,
                            1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f,
                            1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f,
                            1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f,
                            1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f,
                            1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f,
                            1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f, 1 / 49f};
                        k = new Kernel(7, 7, f7);
                        break;
                    case "Blur iluminado 3x3":
                        /**
                         * Este filto emborrona la imÃ¡gen y tambiÃ©n incrementa
                         * su brillo. El emborronamiento es debido a dividir
                         * entre 9, dado que es la cantidad de valores que
                         * componen el filtro. El iluminado es debido a que la
                         * suma de todos los valores de la mÃ¡scara es mayor que
                         * 1, por lo que el resultado final serÃ¡ mÃ¡s brillante
                         * que la imÃ¡gen original.
                         */
                        float fi[] = {2 / 9f, 2 / 9f, 2 / 9f,
                            2 / 9f, 2 / 9f, 2 / 9f,
                            2 / 9f, 2 / 9f, 2 / 9f};
                        k = new Kernel(3, 3, fi);
                        break;
                    case "Blur iluminado 5x5":
                        float fi5[] = {2 / 25f, 2 / 25f, 2 / 25f, 2 / 25f, 2 / 25f,
                            2 / 25f, 2 / 25f, 2 / 25f, 2 / 25f, 2 / 25f,
                            2 / 25f, 2 / 25f, 2 / 25f, 2 / 25f, 2 / 25f,
                            2 / 25f, 2 / 25f, 2 / 25f, 2 / 25f, 2 / 25f,
                            2 / 25f, 2 / 25f, 2 / 25f, 2 / 25f, 2 / 25f};
                        k = new Kernel(5, 5, fi5);
                        break;
                    case "Blur iluminado 7x7":
                        float fi7[] = {2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f,
                            2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f,
                            2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f,
                            2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f,
                            2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f,
                            2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f,
                            2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f, 2 / 49f};
                        k = new Kernel(7, 7, fi7);
                        break;
                }
                try {
                    ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                    BufferedImage imgDest = cop.filter(img, null);  // Si se hace como las otras veces (sin null) no funciona
                    vi.getLienzo2D().setImage(imgDest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }

        }
    }//GEN-LAST:event_BoxFiltrosActionPerformed

    private void SliderCometaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderCometaFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_SliderCometaFocusGained

    private void SliderCometaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderCometaStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null && imgFuente != null) {
                int aux = this.SliderCometa.getValue();
                float f1[] = new float[aux];
                float sum = 0;
                // CreaciÃ³n de la mÃ¡scara exponencial
                for (int i = 0; i < aux; i++) {
                    f1[i] = (float) Math.exp(-i);
                    sum += f1[i];
                }
                //float sum = Arrays.stream(f1).sum();
                // NormalizaciÃ³n de la mÃ¡scara
                for (int i = 0; i < aux; i++) {
                    f1[i] /= sum;
                }
                float f[] = new float[aux + 6];
                f[0] = 0.0f;
                f[1] = 0.0f;
                f[2] = 0.0f;
                f[3] = 0.0f;
                for (int j = 0; j < aux; j++) {
                    f[j + 4] = f1[j];
                }
                f[aux + 4] = 0.0f;
                f[aux + 5] = 0.0f;
                //int aux = 7;
                /*for (int i = 0; i < f.length; i++) {
                    System.out.println("f(" + i + ")=" + f[i]);
                }*/
                //System.out.println(f);
                //float f[] = {0.0f, 0.0f, 0.0f, 0.0f, 0.5f, 0.3f, 0.1f, 0.05f, 0.03f, 0.015f, 0.005f, 0.0f, 0.0f};
                Kernel k = new Kernel(f.length,1,f);// aux + 6, 1, f);//6, 1, f);
                try {
                    ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                    //BufferedImage imgDest = cop.filter(img, null);  // Si se hace como las otras veces (sin null) no funciona
                    //vi.getLienzo2D().setImage(imgDest);
                    //vi.getLienzo2D().repaint();
                    cop.filter(imgFuente, img);
                    //cop.filter(imgFuente, imgDest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_SliderCometaStateChanged

    private void SliderCometaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderCometaFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        this.SliderCometa.setValue(0);
    }//GEN-LAST:event_SliderCometaFocusLost

    private void jMenuItemAffineTransformOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAffineTransformOpActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(1.5, 1.5);
                    AffineTransformOp atop = new AffineTransformOp(at, null);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_jMenuItemAffineTransformOpActionPerformed

    private void jMenuItemLookupOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLookupOpActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            img = ImageTools.convertImageType(img, BufferedImage.TYPE_INT_ARGB);
            if (img != null) {
                try {
                    byte funcionT[] = new byte[256];
                    for (int x = 0; x < 256; x++) {
                        funcionT[x] = (byte) (255 - x);    // Negativo
                        //funcionT[x] = (byte) (x);
                    }
                    LookupTable tabla = new ByteLookupTable(0, funcionT);
                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(img, img);
                    /*BufferedImage imgdest = lop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);*/
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_jMenuItemLookupOpActionPerformed

    private void aplicarLookup(LookupTable tabla) {
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    //int type = LookupTableProducer.TYPE_SFUNCION;
                    // LookupTable lt = LookupTableProducer.createLookupTable(type);
                    //LookupOp lop = new LookupOp(lt, null);
                    LookupOp lop = new LookupOp(tabla, null);
                    lop.filter(img, img);   // Imagen origen y destino iguales
                    vi.getLienzo2D().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }

    private void ButtonContrasteNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonContrasteNormalActionPerformed
        // TODO add your handling code here:
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
        aplicarLookup(tabla);
    }//GEN-LAST:event_ButtonContrasteNormalActionPerformed

    private void ButtonContrasteIluminadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonContrasteIluminadoActionPerformed
        // TODO add your handling code here:
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
        aplicarLookup(tabla);
    }//GEN-LAST:event_ButtonContrasteIluminadoActionPerformed

    private void ButtonContrasteOscurecidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonContrasteOscurecidoActionPerformed
        // TODO add your handling code here:
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
        aplicarLookup(tabla);
    }//GEN-LAST:event_ButtonContrasteOscurecidoActionPerformed

    private void ButtonRotarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRotarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    double r = Math.toRadians(180);
                    Point p = new Point(img.getWidth() / 2, img.getHeight() / 2);
                    AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonRotarActionPerformed

    private void ButtonMasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonMasActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonMasActionPerformed

    private void ButtonMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonMenosActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonMenosActionPerformed

    private void SliderTransformLinealFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderTransformLinealFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_SliderTransformLinealFocusGained

    private void trans(double a) {

        byte funcionT[] = new byte[256];
        int x = 0;
        for (x = 0; x < 128; x++) {
            double K = 255.0 / ((a * 127.0) / 128);
            funcionT[x] = (byte) (K * ((a * x) / 128));
        }
        for (x = 128; x < 256; x++) {
            double K = 255.0 / ((((255 - a) * (255 - 128)) / 127) + a);
            funcionT[x] = (byte) (K * ((((255 - a) * (x - 128)) / 127) + a));
        }
        LookupTable tabla = new ByteLookupTable(0, funcionT);
        aplicarLookup(tabla);
    }
    private void SliderTransformLinealStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderTransformLinealStateChanged
        // TODO add your handling code here:
        //double a = this.SliderTransformLineal.getValue();
        //trans(a);
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null && imgFuente != null) {
                try {
                    double a = this.SliderTransformLineal.getValue();
                    /*byte funcionT[] = new byte[256];
                    double Max1 = (1.0 / 100.0) * (a * 127.0 / 128.0);
                    double K1 = 127.0 / Max1;
                    double Max2 = (1.0 / 100.0) * (((255.0 - a) * (255.0 - 128.0)) / 127.0 + a);
                    double K2 = 255.0 / Max2;
                    for (int x = 0; x < 128; x++) {
                        funcionT[x] = (byte) (K1 * (a * x / 128));
                    }
                    for (int x = 128; x < 256; x++) {
                        funcionT[x] = (byte) (K2 * (((255 - a) * (x - 128)) / 127 + a));
                    }*/

                    byte funcionT[] = new byte[256];
                    int x = 0;
                    for (x = 0; x < 128; x++) {
                        double K = 128.0 / ((a * 127.0) / 128);
                        funcionT[x] = (byte) ((a*x)/128);//(K * ((a * x) / 128));
                    }
                    for (x = 128; x < 256; x++) {
                        double K = 255.0 / ((((255 - a) * (255 - 128)) / 127) + a);
                        funcionT[x] = (byte) ((((255-a)*(x-128))/127)+a);//(K * ((((255 - a) * (x - 128)) / 127) + a));
                    }

                    LookupTable table = new ByteLookupTable(0, funcionT);
                    LookupOp lop = new LookupOp(table, null);

                    lop.filter(imgFuente, img);   // Imagen origen y destino iguales
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_SliderTransformLinealStateChanged

    private void SliderTransformLinealFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderTransformLinealFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        this.SliderTransformLineal.setValue(128);
    }//GEN-LAST:event_SliderTransformLinealFocusLost

    private void ButtonOscurClarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonOscurClarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null && imgFuente != null) {
                try {
                    byte funcionT[] = new byte[256];
                    double K = 255.0 / (1 / (1 + Math.pow(128.0 / (255.0 - 128), 3.0)));
                    //double K = 255.0 / ((128.0/Math.pow(128.0/(255.0-128.0),3))+128.0);
                    for (int x = 0; x < 128; x++) {
                        funcionT[x] = (byte) x;
                    }
                    for (int x = 128; x < 256; x++) {
                        //funcionT[x] = (byte) (K * (1 + Math.exp((x))));//- 128)));
                        funcionT[x] = (byte) ((K * ((1.0 / (1.0 + Math.pow(128 / (x - 127), 3))))) + 128);
                        //double sol =(128/Math.pow(128/(x-127),3))+128;
                        //funcionT[x] = (byte) (K*sol);
                        //funcionT[x] = (byte) ((1.0 / (1.0 + Math.pow(128 / (x - 128), 3))) +128);
                        //funcionT[x] = (byte)(128*Math.pow(1.0054,x-128));
                    }
                    LookupTable table = new ByteLookupTable(0, funcionT);
                    LookupOp lop = new LookupOp(table, null);

                    lop.filter(img, img);   // Imagen origen y destino iguales
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonOscurClarActionPerformed

    private void jMenuItemBandCombineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBandCombineActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    float[][] matriz = {{1.0F, 0.0F, 0.0F},
                    {0.0F, 0.0F, 1.0F},
                    {0.0F, 1.0F, 0.0F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jMenuItemBandCombineActionPerformed

    private void jMenuItemColorConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemColorConvertActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img, null);
                    vi.getLienzo2D().setImage(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_jMenuItemColorConvertActionPerformed

    private void ButtonCombinarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCombinarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    float[][] matriz = {{0.0F, 0.5F, 0.5F},
                    {0.5F, 0.0F, 0.5F},
                    {0.5F, 0.5F, 0.0F}};
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonCombinarActionPerformed

    private BufferedImage getImageBand(BufferedImage img, int banda) {
        // Creamos el modelo de color de la nueva imagen basado en un espacio de color GRAY
        //ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
        ColorSpace cs = new sm.image.color.GreyColorSpace();
        ComponentColorModel cm = new ComponentColorModel(cs, false, false, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
        // Creamos el nuevo raster a partir del raster de la imagen original
        int vband[] = {banda};
        WritableRaster bRaster = (WritableRaster) img.getRaster().createWritableChild(0, 0, img.getWidth(), img.getHeight(), 0, 0, vband);
        // Creamos una nueva imagen que contiene como raster el correspondiente a la banda
        return new BufferedImage(cm, bRaster, false, null);
    }

    private void ButtonBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBandasActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    String nombre = vi.getTitle();
                    for (int i = 0; i < img.getRaster().getNumBands(); i++) {
                        BufferedImage imgbanda = getImageBand(img, i);
                        vi = new VentanaInterna();
                        vi.getLienzo2D().setImage(imgbanda);
                        escritorio.add(vi);
                        vi.setTitle(nombre + "[Banda " + i + "]");
                        vi.setLocation(vi.getX() + (i + 1) * 20, vi.getY() + (i + 1) * 20);
                        vi.setVisible(true);
                    }
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonBandasActionPerformed

    private void BoxEspacioColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoxEspacioColorActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                String nombre = vi.getTitle();
                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                switch (this.BoxEspacioColor.getSelectedItem().toString()) {
                    case "RGB":
                        cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                        break;
                    case "YCC":
                        cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                        break;
                    case "GREY":
                        cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                        break;
                }
                try {
                    ColorConvertOp cop = new ColorConvertOp(cs, null);
                    BufferedImage imgOut = cop.filter(img, null);
                    //ColorSpace cs = new sm.image.color.GreyColorSpace(); //ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    vi = new VentanaInterna();
                    escritorio.add(vi);
                    vi.getLienzo2D().setImage(imgOut);
                    vi.setTitle(nombre + "[" + this.BoxEspacioColor.getSelectedItem().toString() + "]");
                    vi.setVisible(true);
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_BoxEspacioColorActionPerformed

    private void ButtonDuplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDuplicarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    //ColorSpace cs = new sm.image.color.GreyColorSpace(); //ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    vi = new VentanaInterna();
                    escritorio.add(vi);
                    BufferedImage imgcopia = new BufferedImage(img.getWidth(), img.getHeight(), img.getType());
                    imgcopia.setData(img.getData());
                    vi.getLienzo2D().setImage(imgcopia);
                    String nombre = vi.getTitle();
                    vi.setTitle(nombre + "(copia)");
                    vi.setVisible(true);
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonDuplicarActionPerformed

    private void jMenuItemNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNegativoActionPerformed
        // TODO add your handling code here:
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
        aplicarLookup(tabla);
    }//GEN-LAST:event_jMenuItemNegativoActionPerformed

    private void ButtonTintadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonTintadoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    TintOp tintado = new TintOp(vi.getLienzo2D().getColor(), 0.5f);
                    tintado.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonTintadoActionPerformed

    private void ButtonSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSepiaActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    SepiaOp sepia = new SepiaOp();
                    sepia.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonSepiaActionPerformed

    private void ButtonEcualizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEcualizacionActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {
                try {
                    EqualizationOp ecualizacion = new EqualizationOp();
                    ecualizacion.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonEcualizacionActionPerformed

    private void SliderPosterizacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderPosterizacionFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_SliderPosterizacionFocusGained

    private void SliderPosterizacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderPosterizacionStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null && imgFuente != null) {
                try {
                    int n = this.SliderPosterizacion.getValue();
                    PosterizarOp pop = new PosterizarOp(n);
                    pop.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();
                    escritorio.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_SliderPosterizacionStateChanged

    private void SliderPosterizacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderPosterizacionFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        SliderPosterizacion.setValue(2);
    }//GEN-LAST:event_SliderPosterizacionFocusLost

    private void ButtonFiltroRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonFiltroRojoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null) {//&& imgFuente != null){
                try {
                    RojoOp rojo = new RojoOp(20);
                    rojo.filter(img, img);
                    vi.getLienzo2D().repaint();
                    escritorio.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ButtonFiltroRojoActionPerformed

    private void jMenuItemAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAcercaDeActionPerformed
        // TODO add your handling code here:
        String texto = "AplicaciÃ³n multimedia - VersiÃ³n 0.12\n"
                + "Desarrollado en NetBeans IDE 18\n"
                + "Autora: Aida MartÃ­n CuÃ©llar";
        JOptionPane.showMessageDialog(this, texto);
    }//GEN-LAST:event_jMenuItemAcercaDeActionPerformed

    private void ButtonC1OpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonC1OpActionPerformed
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Elije un color", Color.RED);
        ButtonC1Op.setBackground(color);
    }//GEN-LAST:event_ButtonC1OpActionPerformed

    private void ButtonC2OpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonC2OpActionPerformed
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Elije un color", Color.BLUE);
        ButtonC2Op.setBackground(color);
    }//GEN-LAST:event_ButtonC2OpActionPerformed

    private void SliderCambiarTonoOpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderCambiarTonoOpFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_SliderCambiarTonoOpFocusGained

    private void SliderCambiarTonoOpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SliderCambiarTonoOpStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImage();
            if (img != null && imgFuente != null) {
                try {
                    int umbral = this.SliderCambiarTonoOp.getValue();
                    CambiarTonoOp ctop = new CambiarTonoOp(umbral, this.ButtonC1Op.getBackground(), this.ButtonC2Op.getBackground());
                    ctop.filter(imgFuente, img);
                    //vi.getLienzo2D().repaint();
                    escritorio.repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_SliderCambiarTonoOpStateChanged

    private void SliderCambiarTonoOpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SliderCambiarTonoOpFocusLost
        // TODO add your handling code here:
        imgFuente = null;
        SliderPosterizacion.setValue(2);
    }//GEN-LAST:event_SliderCambiarTonoOpFocusLost

    private void jMenuItemAbrirAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAbrirAudioActionPerformed
        // TODO add your handling code here:
        JFileChooser dig = new JFileChooser();
        //String[] s = ImageIO.getReaderFileSuffixes();
        /*for (int i = 0; i < s.length; i++) {
            FileFilter filter = new FileNameExtensionFilter(s[i] + " files", s[i]);
            //dig.setFileFilter(filter);
            dig.addChoosableFileFilter(filter);
        }*/
        int resp = dig.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                //File f = dig.getSelectedFile();
                File f = new File(dig.getSelectedFile().getAbsolutePath()) {
                    @Override
                    public String toString() {
                        return this.getName();
                    }
                };
                //BufferedImage img = ImageIO.read(f);
                /* VentanaInterna vi = new VentanaInterna();
                vi.getLienzo2D().setImage(img);
                vi.getLienzo2D().addMouseMotionListener(new ManejadorRaton());
                vi.getLienzo2D().addMouseListener(new ManejadorClickRaton());
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);*/
                this.listaReproduccion.addItem(f);
                this.listaReproduccion.setSelectedItem(f);
            } catch (Exception ex) {
                System.err.println("Error al abir el sonido");
            }
        }
    }//GEN-LAST:event_jMenuItemAbrirAudioActionPerformed

    private void ButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPlayActionPerformed
        // TODO add your handling code here:
        File f = (File) listaReproduccion.getSelectedItem();
        if (f != null) {
            player = new SMClipPlayer(f);
            if (player != null) {
                player.addLineListener(new ManejadorAudio());
                player.play();
            }
        }
    }//GEN-LAST:event_ButtonPlayActionPerformed

    private void ButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStopActionPerformed
        // TODO add your handling code here:
        if (player != null) {
            player.stop();
            player = null;
        }
        if (recorder != null) {
            recorder.stop();
            this.listaReproduccion.addItem(grabacion);
            grabacion = null;
            recorder = null;
        }
    }//GEN-LAST:event_ButtonStopActionPerformed

    private void jMenuItemGrabarAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGrabarAudioActionPerformed
        // TODO add your handling code here:
        if (recorder == null) {
            JFileChooser dig = new JFileChooser();
            int resp = dig.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    File f = dig.getSelectedFile();
                    grabacion = f;
                    recorder = new SMSoundRecorder(f);
                    if (recorder != null) {
                        recorder.addLineListener(new ManejadorAudio());
                        recorder.record();
                    }
                } catch (Exception ex) {
                    System.err.println("Error al grabar el audio");
                }
            }
        }
    }//GEN-LAST:event_jMenuItemGrabarAudioActionPerformed

    private void ButtonRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonRecordActionPerformed
        // TODO add your handling code here:
        if (recorder == null) {
            JFileChooser dig = new JFileChooser();
            int resp = dig.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    File f = dig.getSelectedFile();
                    grabacion = f;
                    recorder = new SMSoundRecorder(f);
                    if (recorder != null) {
                        recorder.addLineListener(new ManejadorAudio());
                        recorder.record();
                    }
                } catch (Exception ex) {
                    System.err.println("Error al grabar el audio");
                }
            }
        }
    }//GEN-LAST:event_ButtonRecordActionPerformed

    private void ButtonNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonNegativoActionPerformed
        // TODO add your handling code here:
        LookupTable tabla = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
        aplicarLookup(tabla);
    }//GEN-LAST:event_ButtonNegativoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
                //new VentanaInterna().setVisible(true);
            }
        });

    }

    private class ManejadorVentanaInterna extends InternalFrameAdapter {

        public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            VentanaInterna vi = (VentanaInterna) evt.getInternalFrame();
            ButtonAlisado.setSelected(vi.getLienzo2D().getAlisado());
            ButtonColor.setBackground(vi.getLienzo2D().getColor());
            ButtonRellenar.setSelected(vi.getLienzo2D().getRelleno());
            ButtonSeleccion.setSelected(vi.getLienzo2D().getEditar());
            if (ButtonSeleccion.isSelected()) {
                BarraDeEstado.setText("Seleccion");
            }
            ButtonTransparencia.setSelected(vi.getLienzo2D().getTransparencia());
            SliderGrosor.setValue((int) ((BasicStroke) vi.getLienzo2D().getTrazo()).getLineWidth());
            switch (vi.getLienzo2D().getTipoForma()) {
                case LINEA:
                    ButtonLinea.setSelected(true);
                    ButtonRectang.setSelected(false);
                    ButtonCirc.setSelected(false);
                    ButtonFantasma.setSelected(false);
                    BarraDeEstado.setText("Linea");
                    break;
                case RECTANGULO:
                    ButtonRectang.setSelected(true);
                    ButtonLinea.setSelected(false);
                    ButtonCirc.setSelected(false);
                    ButtonFantasma.setSelected(false);
                    BarraDeEstado.setText("Rectangulo");
                    break;
                case ELIPSE:
                    ButtonCirc.setSelected(true);
                    ButtonRectang.setSelected(false);
                    ButtonLinea.setSelected(false);
                    ButtonFantasma.setSelected(false);
                    BarraDeEstado.setText("Elipse");
                    break;
                case FANTASMA:
                    ButtonFantasma.setSelected(true);
                    ButtonRectang.setSelected(false);
                    ButtonCirc.setSelected(false);
                    ButtonLinea.setSelected(false);
                    BarraDeEstado.setText("Fantasma");
                    break;
            }
        }
    }

    private class ManejadorRaton extends MouseMotionAdapter {

        @Override
        public void mouseMoved(java.awt.event.MouseEvent evt) {
            //Point p = new Point(evt.getPoint());
            VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
            if (vi != null) {
                BufferedImage img = vi.getLienzo2D().getImage();
                if (img != null && evt.getX() < img.getWidth() && evt.getX() > 0 && evt.getY() > 0 && evt.getY() < img.getHeight()) {
                    Coordenadas.setText("X: " + evt.getX() + " ,\tY: " + evt.getY());
                }
            }
        }
    }

    private class ManejadorClickRaton extends MouseAdapter {

        @Override
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
            MiShape figura = vi.getLienzo2D().getForma();
            if (ButtonSeleccion.isSelected() && figura != null) {
                ButtonColor.setBackground(figura.getColor());
                SliderGrosor.setValue((int) ((BasicStroke) figura.getTrazo()).getLineWidth());//((int) ((BasicStroke) vi.getLienzo2D().getTrazo()).getLineWidth());
                ButtonRellenar.setSelected(figura.getRelleno());
                ButtonTransparencia.setSelected(vi.getLienzo2D().getTransparencia());
                ButtonAlisado.setSelected(figura.getAlisado());
                if (figura instanceof MiLinea) {
                    BarraDeEstado.setText("Editando Linea");
                } else if (figura instanceof MiRectangulo) {
                    BarraDeEstado.setText("Editando Rectangulo");
                } else if (figura instanceof MiElipse) {
                    BarraDeEstado.setText("Editando Elipse");
                } else if (figura instanceof MiFantasma) {
                    BarraDeEstado.setText("Editando Fantasma");
                }
            }
        }
    }

    class ManejadorAudio implements LineListener {

        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                ButtonPlay.setEnabled(false);
            }
            if (event.getType() == LineEvent.Type.STOP) {
                ButtonPlay.setEnabled(true);
            }
            if (event.getType() == LineEvent.Type.CLOSE) {
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BarraDeEstado;
    private javax.swing.JComboBox<String> BoxEspacioColor;
    private javax.swing.JComboBox<String> BoxFiltros;
    private javax.swing.JButton ButtonAbrir;
    private javax.swing.JToggleButton ButtonAlisado;
    private javax.swing.JButton ButtonBandas;
    private javax.swing.JButton ButtonC1Op;
    private javax.swing.JButton ButtonC2Op;
    private javax.swing.JToggleButton ButtonCirc;
    private javax.swing.JButton ButtonColor;
    private javax.swing.JButton ButtonCombinar;
    private javax.swing.JButton ButtonContrasteIluminado;
    private javax.swing.JButton ButtonContrasteNormal;
    private javax.swing.JButton ButtonContrasteOscurecido;
    private javax.swing.JButton ButtonDuplicar;
    private javax.swing.JButton ButtonEcualizacion;
    private javax.swing.JToggleButton ButtonFantasma;
    private javax.swing.JButton ButtonFiltroRojo;
    private javax.swing.JButton ButtonGuardar;
    private javax.swing.JToggleButton ButtonLinea;
    private javax.swing.JButton ButtonMas;
    private javax.swing.JButton ButtonMenos;
    private javax.swing.JButton ButtonNegativo;
    private javax.swing.JButton ButtonNuevo;
    private javax.swing.JButton ButtonOscurClar;
    private javax.swing.JButton ButtonPlay;
    private javax.swing.JButton ButtonRecord;
    private javax.swing.JToggleButton ButtonRectang;
    private javax.swing.JToggleButton ButtonRellenar;
    private javax.swing.JButton ButtonRotar;
    private javax.swing.JToggleButton ButtonSeleccion;
    private javax.swing.JButton ButtonSepia;
    private javax.swing.JButton ButtonStop;
    private javax.swing.JButton ButtonTintado;
    private javax.swing.JToggleButton ButtonTransparencia;
    private javax.swing.JButton ButtonVolcar;
    private javax.swing.JLabel Coordenadas;
    private javax.swing.JSlider SliderBrillo;
    private javax.swing.JSlider SliderCambiarTonoOp;
    private javax.swing.JSlider SliderCometa;
    private javax.swing.JSlider SliderContraste;
    private javax.swing.JSlider SliderGrosor;
    private javax.swing.JSlider SliderPosterizacion;
    private javax.swing.JSlider SliderTransformLineal;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelBrillo;
    private javax.swing.JLabel jLabelCometa;
    private javax.swing.JLabel jLabelContraste;
    private javax.swing.JMenu jMenuArchivo;
    private javax.swing.JMenu jMenuAyuda;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuImagen;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItemAbrir;
    private javax.swing.JMenuItem jMenuItemAbrirAudio;
    private javax.swing.JMenuItem jMenuItemAcercaDe;
    private javax.swing.JMenuItem jMenuItemAffineTransformOp;
    private javax.swing.JMenuItem jMenuItemBandCombine;
    private javax.swing.JMenuItem jMenuItemColorConvert;
    private javax.swing.JMenuItem jMenuItemConvolveOp;
    private javax.swing.JMenuItem jMenuItemGrabarAudio;
    private javax.swing.JMenuItem jMenuItemGuardar;
    private javax.swing.JMenuItem jMenuItemLookupOp;
    private javax.swing.JMenuItem jMenuItemNegativo;
    private javax.swing.JMenuItem jMenuItemNuevo;
    private javax.swing.JMenuItem jMenuItemRescaleOp;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelColor;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JToolBar jToolBarDibujo;
    private javax.swing.JToolBar jToolBarImagen;
    private javax.swing.JToolBar jToolBarSonido;
    private javax.swing.JComboBox<File> listaReproduccion;
    // End of variables declaration//GEN-END:variables

}
